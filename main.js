!function(){"use strict";var e={45:function(e,t,s){e.exports=s.p+"4e8e0a1d604782a0dff8.svg"}},t={};function s(n){var i=t[n];if(void 0!==i)return i.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.p="",function(){class e{constructor(e){this._popup=e,this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup-box_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup-box_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup-box__close-btn")||e.target.classList.contains("popup-box_opened"))&&this.close()}))}}class t extends e{constructor(e,t,s,n){super(e),this._popupForm=this._popup.querySelector(".popup-box__form"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".popup-box__input"),this._button=this._popupForm.querySelector(".popup-box__save-btn"),this._buttonText=s,this._loadingButtonText=n}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){this._popupForm.reset(),super.close()}showLoading(){this._button.textContent=this._loadingButtonText}hideLoading(){this._button.textContent=this._buttonText}}var n=s(45);const i=document.querySelector(".popup-box__form_edit"),r=document.querySelector(".popup-box__form_add"),o=document.querySelector(".popup-box__form_change"),a=document.querySelector(".elements__list"),l=document.querySelector(".profile__name"),h=document.querySelector(".profile__role"),_=document.querySelector(".profile__avatar"),c=document.querySelector(".popup-box_type_edit"),u=document.querySelector(".popup-box_type_add"),d=document.querySelector(".popup-box_type_change"),p=document.querySelector(".popup-box_type_open"),m=document.querySelector(".popup-box__input_type_name"),b=document.querySelector(".popup-box__input_type_about"),v=document.querySelector(".profile__edit-btn"),g=document.querySelector(".profile__add-btn"),L=document.querySelector(".profile__avatar-edit"),y=document.querySelector(".popup-box_type_delete");document.querySelector(".header__image").src=n;const f=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}init(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((e=>this._getResponseData(e)))}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((e=>this._getResponseData(e)))}editProfile(e){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify(e)}).then((e=>this._getResponseData(e)))}addCard(e){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then((e=>this._getResponseData(e)))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._getResponseData(e)))}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"}).then((e=>this._getResponseData(e)))}dislikeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"}).then((e=>this._getResponseData(e)))}updateProfilePic(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e["image-link"]})}).then((e=>this._getResponseData(e)))}_getResponseData(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"51cb9d12-6e1a-4c88-9721-b40c0e542029","Content-Type":"application/json"}});let E;f.init().then((e=>{let[t,s]=e;E=s._id,C.renderer(t),S.setUserInfo(s)})).catch(console.log);const S=new class{constructor(e){let{userName:t,userJob:s,avatar:n}=e;this._userName=t,this._userJob=s,this._avatar=n}getUserInfo(){return{userName:this._userName.textContent,userJob:this._userJob.textContent,avatar:this._avatar.src}}setUserInfo(e){this._userName.textContent=e.name,this._userJob.textContent=e.about,this._avatar.src=e.avatar}setAvatar(e){this._avatar.src=e["image-link"]}}({userName:l,userJob:h,avatar:_}),x={},C=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=t}renderer(e){e.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=U(e);C.addItem(t)}},a),k=new class extends e{constructor(e){super(e),this._caption=this._popup.querySelector(".popup-box__text"),this._img=this._popup.querySelector(".popup-box__image")}open(e){let{link:t,name:s}=e;this._caption.textContent=s,this._img.src=t,this._img.alt=s,super.open()}}(p),q=new class extends e{constructor(e,t,s){super(e),this._buttonText=t,this._loadingButtonText=s,this._button=this._popup.querySelector(".popup-box__save-btn")}setAction(e){this._handleSubmit=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}showLoading(){this._button.textContent=this._loadingButtonText}hideLoading(){this._button.textContent=this._buttonText}}(y,"Yes","Loading..."),I=new t(c,(e=>{I.showLoading(),f.editProfile(e).then((e=>{S.setUserInfo(e),I.close()})).catch(console.log).finally((()=>{I.hideLoading()}))}),"Save","Saving..."),w=new t(u,(e=>{w.showLoading(),f.addCard({name:e.title,link:e["image-link"]}).then((e=>{const t=U(e);C.addItem(t),w.close()})).catch(console.log).finally((()=>{w.hideLoading()}))}),"Create","Creating..."),B=new t(d,(e=>{B.showLoading(),f.updateProfilePic(e).then((()=>{S.setAvatar(e),B.close()})).catch(console.log).finally((()=>{B.hideLoading()}))}),"Save","Saving...");function U(e){const t=new class{constructor(e,t,s,n,i,r){var o,a;a=()=>{this._showLikes.textContent=this._likes.length,this.isLiked()?this._likeBtn.classList.add("element__like-btn_active"):this._likeBtn.classList.remove("element__like-btn_active")},(o="_renderLikes")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._name=e.name,this._link=e.link,this._handleCardClick=t,this._handleDeleteButton=s,this._handleLikeButton=n,this._cardSelector=i,this._likes=e.likes,this._id=e._id,this._element=this._getTemplate(),this._showLikes=this._element.querySelector(".element__show-likes"),this._likeBtn=this._element.querySelector(".element__like-btn"),this._cardImage=this._element.querySelector(".element__image"),this._deleteBtn=this._element.querySelector(".element__delete-btn"),this._text=this._element.querySelector(".element__text"),this._userId=r,this._ownerId=e.owner._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){this._cardImage.addEventListener("click",this._handleCardClick),this._likeBtn.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._deleteBtn.addEventListener("click",(()=>this._handleDeleteButton(this._id)))}isLiked(){return this._likes.some((e=>e._id===this._userId))}likeCard(e){this._likes=e,this._renderLikes()}removeCard(){this._element.remove(),this._element=null}generateCard(){return this._cardImage.src=this._link,this._cardImage.alt=this._name,this._text.textContent=this._name,this._setEventListeners(),this._ownerId!==this._userId&&(this._deleteBtn.style.display="none"),this._renderLikes(),this._element}}(e,(()=>{k.open(e)}),(e=>{q.open(),q.setAction((()=>{q.showLoading(),f.deleteCard(e).then((()=>{t.removeCard(),q.close()})).catch(console.log).finally((()=>{q.hideLoading()}))}))}),(e=>{t.isLiked()?f.dislikeCard(e).then((e=>{t.likeCard(e.likes)})).catch(console.log):f.likeCard(e).then((e=>{t.likeCard(e.likes)})).catch(console.log)}),"#element-template",E);return t.generateCard()}var T;I.setEventListeners(),w.setEventListeners(),k.setEventListeners(),B.setEventListeners(),q.setEventListeners(),v.addEventListener("click",(function(){I.open();const e=S.getUserInfo();m.value=e.userName,b.value=e.userJob,x[i.getAttribute("name")].resetValidation()})),g.addEventListener("click",(function(){w.open(),x[r.getAttribute("name")].resetValidation()})),L.addEventListener("click",(function(){B.open(),x[o.getAttribute("name")].resetValidation()})),T={inputSelector:".popup-box__input",submitButtonSelector:".popup-box__save-btn",inactiveButtonClass:"popup-box__save-btn_disabled",inputErrorClass:"popup-box__input_type_error",errorClass:"popup-box__error_visible"},Array.from(document.querySelectorAll(".popup-box__form")).forEach((e=>{const t=new class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleButtonState(),this._checkInputValidity(e)}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(T,e),s=e.getAttribute("name");x[s]=t,t.enableValidation()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,